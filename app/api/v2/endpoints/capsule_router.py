# Fichier: backend/app/api/v2/endpoints/capsule_router.py

"""
================================================================================
SECTION 1: IMPORTS & CONFIGURATION
================================================================================
"""
import logging
import json
import re
import unicodedata
from typing import List

from fastapi import APIRouter, Depends, HTTPException, BackgroundTasks, status
from pydantic import BaseModel
from sqlalchemy.orm import Session
from openai import OpenAI

from app.core.config import settings
from app.api.v2.dependencies import get_db, get_current_user
from app.models.user import user_model
from app.models.user.user_model import User
from app.models.capsule import capsule_model, granule_model, atom_model, utility_models, molecule_model
from app.models.analytics.vector_store_model import VectorStore
from app.schemas.capsule import capsule_schema
from app.services.services.capsule_service import CapsuleService
from app.services.services.capsule_service import get_capsule_by_path
from app.services.classification_service import db_classifier
from app.services.capsule_addon.exercices.exercices_generator import ExerciseGeneratorService
from app.models.progress.user_atomic_progress import UserAtomProgress
from app.services.rag_utils import get_embedding
from app.services.services.capsule_service import CapsuleService
from app.schemas.capsule import capsule_schema # Votre fichier de sch√©mas
from app.api.v2 import dependencies



from app.crud import roadmap_crud
from app.services.services.capsules.languages.foreign_builder import ForeignBuilder
from app.schemas.capsule.capsule_schema import CapsuleReadWithRoadmap # Le nouveau sch√©ma
from app.crud import badge_crud



# --- Configuration du Logger et du Routeur ---
logger = logging.getLogger(__name__)
router = APIRouter()

# --- Initialisation du client OpenAI ---
try:
    openai_client = OpenAI(api_key=settings.OPENAI_API_KEY)
    logger.info("‚úÖ Client OpenAI configur√©.")
except Exception as e:
    openai_client = None
    logger.error(f"‚ùå Erreur de configuration pour OpenAI: {e}")


"""
================================================================================
SECTION 2: MOD√àLES DE DONN√âES (PYDANTIC)
================================================================================
"""
class ClassifyRequest(BaseModel):
    text: str


"""
================================================================================
SECTION 3: UTILITAIRES DE TRAITEMENT DE TEXTE
================================================================================
"""
_STOP_PATTERNS = re.compile(
    r"\b("
    r"je\s*(voudrais|voudrai|veux|vx)\b"
    r"|est[-\s]*ce\s*possible\b"
    r"|apprendre\b"
    r"|√©tudier\b|etudier\b"
    r"|comprendre\b"
    r"|cours\s+sur\b"
    r"|les?\s+bases\s+de\b"
    r"|introduction\s+√†\b|introduction\s+a\b"
    r"|comment\s+(ma[i√Æ]triser|fonctionne|apprendre)\b"
    r"|exercices?\s+sur\b"
    r")",
    flags=re.IGNORECASE
)

def _strip_accents(s: str) -> str:
    return "".join(c for c in unicodedata.normalize("NFD", s) if unicodedata.category(c) != "Mn")

def clean_user_query(q: str) -> str:
    q_norm = q.strip()
    q_noacc = _strip_accents(q_norm)
    cleaned_noacc = _STOP_PATTERNS.sub(" ", q_noacc)
    cleaned = _STOP_PATTERNS.sub(" ", q_norm)
    cleaned = re.sub(r"\s{2,}", " ", cleaned).strip()
    return cleaned if cleaned else q.strip()


"""
================================================================================
SECTION 4: GESTION DES CAPSULES (CRUD)
================================================================================
"""
@router.post(
    "/", 
    response_model=capsule_schema.CapsuleRead, # Utilise votre sch√©ma CapsuleRead existant
    status_code=status.HTTP_201_CREATED
)
def create_generic_capsule(
    request: capsule_schema.CapsuleCreateRequest, # Utilise le sch√©ma de requ√™te que nous avons ajout√©
    db: Session = Depends(dependencies.get_db),
    current_user: User = Depends(dependencies.get_current_user),
):
    """
    Cr√©e une nouvelle capsule g√©n√©rique √† partir d'un sujet.
    G√©n√®re le plan complet et le contenu de la premi√®re mol√©cule.
    """
    # 3. Instanciation du service
    # On cr√©e une instance du service en lui passant la session db et l'utilisateur
    # qui viennent des d√©pendances.
    service = CapsuleService(db=db, user=current_user)
    
    # On appelle la nouvelle m√©thode que nous avons ajout√©e au service.
    capsule = service.create_capsule_from_classification(
        classification_data=request.dict()
    )
    
    if not capsule:
        raise HTTPException(status_code=500, detail="La cr√©ation de la capsule a √©chou√©.")
    
    return capsule


# --- Endpoint de progression (JIT) ---
@router.post(
    "/molecules/{molecule_id}/complete",
    response_model=List[capsule_schema.AtomRead] # Renvoie la liste des nouveaux atomes
)
def complete_molecule_and_get_next(
    molecule_id: int,
    db: Session = Depends(dependencies.get_db),
    current_user: User = Depends(dependencies.get_current_user),
):
    """
    Valide la fin d'une mol√©cule et g√©n√®re/renvoie le contenu de la suivante.
    """
    # On instancie le service de la m√™me mani√®re
    service = CapsuleService(db=db, user=current_user)
    
    # On appelle la m√©thode de g√©n√©ration JIT
    next_atoms = service.generate_next_molecule_content(
        completed_molecule_id=molecule_id
    )
    
    # Si la liste est vide, c'est qu'il n'y a pas de mol√©cule suivante
    if not next_atoms:
        raise HTTPException(
            status_code=status.HTTP_404_NOT_FOUND, 
            detail="La mol√©cule suivante n'a pas √©t√© trouv√©e ou la capsule est termin√©e."
        )
        
    return next_atoms


@router.get(
    "/molecules/{molecule_id}/atoms",
    response_model=List[capsule_schema.AtomRead],
    summary="R√©cup√©rer ou g√©n√©rer les atomes pour une mol√©cule"
)
def get_atoms_for_molecule(
    molecule_id: int,
    db: Session = Depends(dependencies.get_db),
    current_user: User = Depends(dependencies.get_current_user),
):
    """
    R√©cup√®re la liste des atomes pour une mol√©cule sp√©cifique.
    Si les atomes n'ont pas encore √©t√© g√©n√©r√©s, cette route d√©clenche
    leur cr√©ation par le builder appropri√©.
    """
    service = CapsuleService(db=db, user=current_user)
    atoms = service.get_or_generate_atoms_for_molecule(molecule_id=molecule_id)
    
    if not atoms:
        # Cela peut arriver si la g√©n√©ration √©choue ou si la recette est vide.
        # Le frontend peut afficher un message appropri√©.
        return []
        
    return atoms

def log_all_capsules(db: Session):
    capsules = db.query(capsule_model.Capsule).all()
    for cap in capsules:
        logger.info(f"[DB] Capsule: {cap.__dict__}")

@router.get(
    "/{domain}/{area}/{capsule_id}",
    response_model=capsule_schema.CapsuleReadWithRoadmap # ou CapsuleRead si vous n'avez pas de roadmap pour tout
)
def get_capsule(
    domain: str,
    area: str,
    capsule_id: int,
    db: Session = Depends(dependencies.get_db),
    current_user: User = Depends(dependencies.get_current_user)
):
    """
    R√©cup√®re les d√©tails d'une capsule, quelle que soit sa cat√©gorie.
    """
    logger.info(f"--- [API] Requ√™te pour r√©cup√©rer la capsule ID: {capsule_id} via {domain}/{area} ---")
    
    capsule = get_capsule_by_path(
        db=db, 
        user=current_user, 
        domain=domain, 
        area=area, 
        capsule_id=capsule_id
    )

    if not capsule:
        raise HTTPException(status_code=404, detail="Capsule non trouv√©e ou acc√®s refus√©.")

    # Pour les capsules de langue, on attache la roadmap si elle existe.
    # Pour les autres, ce sera simplement None.
    if capsule.domain == "languages":
        capsule.language_roadmap = roadmap_crud.get_roadmap_by_user_and_capsule(
            db, user_id=current_user.id, capsule_id=capsule.id
        )

    service = CapsuleService(db=db, user=current_user)
    capsule = service.annotate_capsule(capsule)

    logger.info(f"--- [API] Capsule trouv√©e, renvoi des donn√©es. <üíäCapsule(id={capsule.id})>")
    return capsule


"""
================================================================================
SECTION 5: GESTION DES INSCRIPTIONS UTILISATEUR
================================================================================
"""
@router.get("/me", response_model=List[capsule_schema.CapsuleRead], summary="Lister les capsules de l'utilisateur")
def get_my_capsules(
    db: Session = Depends(get_db),
    current_user: user_model.User = Depends(get_current_user)
):
    """R√©cup√®re la liste des capsules auxquelles l'utilisateur actuel est inscrit."""
    enrollments = db.query(utility_models.UserCapsuleEnrollment).filter(utility_models.UserCapsuleEnrollment.user_id == current_user.id).all()
    return [enrollment.capsule for enrollment in enrollments]

@router.get("/public", response_model=List[capsule_schema.CapsuleRead], summary="Lister les capsules publiques disponibles")
def get_public_capsules(
    db: Session = Depends(get_db),
    current_user: user_model.User = Depends(get_current_user)
):
    """R√©cup√®re les capsules publiques auxquelles l'utilisateur N'EST PAS encore inscrit."""
    enrolled_capsule_ids = {e.capsule_id for e in current_user.enrollments}
    
    public_capsules = db.query(capsule_model.Capsule).filter(
        capsule_model.Capsule.is_public == True,
        ~capsule_model.Capsule.id.in_(enrolled_capsule_ids)
    ).all()
    
    return public_capsules

@router.post("/{capsule_id}/enroll", response_model=capsule_schema.CapsuleRead, summary="S'inscrire √† une capsule")
def enroll_in_capsule(
    capsule_id: int,
    db: Session = Depends(get_db),
    current_user: user_model.User = Depends(get_current_user)
):
    """Inscrit l'utilisateur √† une capsule publique."""
    capsule = db.query(capsule_model.Capsule).get(capsule_id)
    if not capsule or not capsule.is_public:
        raise HTTPException(status_code=404, detail="Capsule non trouv√©e ou non publique.")

    existing = db.query(utility_models.UserCapsuleEnrollment).filter_by(user_id=current_user.id, capsule_id=capsule_id).first()
    if existing:
        return capsule

    new_enrollment = utility_models.UserCapsuleEnrollment(user_id=current_user.id, capsule_id=capsule_id)
    db.add(new_enrollment)
    db.commit()
    # Badges d'inscription: premi√®re inscription √† une capsule
    try:
        enroll_count = db.query(utility_models.UserCapsuleEnrollment).filter_by(user_id=current_user.id).count()
        if enroll_count == 1:
            badge_crud.award_badge(db, current_user.id, "apprenant-premiere-inscription-capsule")
    except Exception:
        pass
    return capsule

@router.post("/{capsule_id}/unenroll", response_model=capsule_schema.CapsuleRead, summary="Se d√©sinscrire d'une capsule")
def unenroll_from_capsule(
    capsule_id: int,
    db: Session = Depends(get_db),
    current_user: user_model.User = Depends(get_current_user)
):
    """D√©sinscrit l'utilisateur d'une capsule."""
    enrollment = db.query(utility_models.UserCapsuleEnrollment).filter_by(user_id=current_user.id, capsule_id=capsule_id).first()
    if not enrollment:
        raise HTTPException(status_code=404, detail="Inscription non trouv√©e.")
        
    capsule = enrollment.capsule
    db.delete(enrollment)
    db.commit()
    return capsule


"""
================================================================================
SECTION 6: APPRENTISSAGE & G√âN√âRATION DE CONTENU
================================================================================
"""
@router.post("/classify-topic/", summary="Classifier un sujet de capsule")
def classify_topic(
    request: ClassifyRequest,
    db: Session = Depends(get_db)
):
    """Endpoint utilitaire pour tester la classification d'un texte."""
    logger.info(f"\n--- [CLASSIFY] D√©marrage pour le texte: '{request.text}' ---")
    text_input = clean_user_query(request.text)

    if not text_input.strip():
        raise HTTPException(status_code=400, detail="Le texte ne peut pas √™tre vide.")

    predictions = db_classifier.classify(text_input, db, top_k=1)
    
    if not predictions:
        logger.error(f"--- [CLASSIFY] Aucune pr√©diction trouv√©e pour '{text_input}'")
        return {"input_text": text_input, "domain": "others", "area": "unknown", "confidence": 0}

    best_prediction = predictions[0]
    category_info = best_prediction.get("category", {})
    
    result = {
        "input_text": text_input,
        "main_skill": category_info.get("name", "unknown"),
        "domain": category_info.get("domain", "others"),
        "area": category_info.get("area", "default"),
        "confidence": best_prediction.get("confidence", 0)
    }
    
    logger.info(f"--- [CLASSIFY] R√©sultat: {json.dumps(result, indent=2, ensure_ascii=False)}")
    return result


@router.post("/{capsule_id}/level/{level_order}/session", summary="Pr√©parer et r√©cup√©rer une session d'apprentissage")
def prepare_learning_session(
    capsule_id: int,
    level_order: int,
    db: Session = Depends(get_db),
    current_user: user_model.User = Depends(get_current_user)
):
    """
    Point d'entr√©e principal pour d√©marrer l'apprentissage.
    1. Trouve la capsule.
    2. Appelle le service qui, via le bon builder, va:
        a. Cr√©er la structure (Granule, Molecules) si elle n'existe pas.
        b. G√©n√©rer le contenu p√©dagogique (Atoms) si n√©cessaire.
    3. Retourne le contenu complet de la session.
    """
    logger.info(f"--- [API] Pr√©paration de la session pour Capsule ID: {capsule_id}, Level: {level_order} ---")
    
    capsule = db.query(capsule_model.Capsule).get(capsule_id)
    if not capsule:
        raise HTTPException(status_code=404, detail="Capsule non trouv√©e.")

    # On d√©l√®gue toute la logique complexe au service
    capsule_service = CapsuleService(db, current_user)
    try:
        session_data = capsule_service.prepare_session_for_level(capsule, level_order)
        return session_data
    except Exception as e:
        logger.error(f"Erreur lors de la pr√©paration de la session: {e}", exc_info=True)
        raise HTTPException(status_code=500, detail="Impossible de pr√©parer la session d'apprentissage.")



@router.post("/{capsuleId}/level/{levelOrder}/molecule/{moleculeOrder}", summary="G√©n√©rer le contenu d'une le√ßon (mol√©cule)")
def create_molecule_content(
    capsuleId: int,
    levelOrder: int,
    moleculeOrder: int,
    db: Session = Depends(get_db),
    current_user: user_model.User = Depends(get_current_user),
):
    """G√©n√®re le contenu d'une le√ßon si elle n'existe pas d√©j√†."""
    capsule = db.query(capsule_model.Capsule).get(capsuleId)
    if not capsule:
        raise HTTPException(status_code=404, detail="Capsule introuvable.")
    
    try:
        plan = capsule.learning_plan_json or {}
        level_data = plan.get("levels", [])[levelOrder - 1]
        molecule_data = level_data.get("chapters", [])[moleculeOrder -1] # Correction d'index
        molecule_title = molecule_data.get("chapter_title")
    except IndexError:
        raise HTTPException(status_code=404, detail="Niveau ou chapitre introuvable dans le plan JSON.")

    # Get-or-Create la hi√©rarchie en base de donn√©es
    granule = db.query(granule_model.Granule).filter_by(capsule_id=capsuleId, order=levelOrder).first()
    if not granule:
        granule = granule_model.Granule(capsule_id=capsuleId, order=levelOrder, title=level_data.get("level_title"))
        db.add(granule)
        db.flush()

    molecule = db.query(molecule_model.Molecule).filter_by(granule_id=granule.id, order=moleculeOrder).first()
    if not molecule:
        molecule = molecule_model.Molecule(granule_id=granule.id, order=moleculeOrder, title=molecule_title)
        db.add(molecule)
        db.flush()

    service = CapsuleService(db=db, user=current_user)
    service.assert_molecule_unlocked(molecule)

    # V√©rifier si le contenu de la le√ßon (Atom) existe d√©j√†
    existing_atom = db.query(atom_model.Atom).filter_by(molecule_id=molecule.id, content_type=atom_model.AtomContentType.LESSON).first()
    if existing_atom:
        return {"status": "exists", "lesson": existing_atom.content}

    # G√©n√©ration du contenu via OpenAI
    logger.info(f"G√©n√©ration de contenu pour la mol√©cule '{molecule.title}'")
    system_msg = "Tu es un assistant p√©dagogique. R√©ponds STRICTEMENT au format JSON. Structure attendue : {\"lesson_text\": \"...markdown...\"}."
    user_msg = f"G√©n√®re une le√ßon compl√®te et structur√©e pour la le√ßon ¬´ {molecule.title} ¬ª dans le contexte du cours ¬´ {capsule.title} ¬ª."
    
    try:
        response = openai_client.chat.completions.create(model="gpt-5-mini-2025-08-07", messages=[{"role": "system", "content": system_msg}, {"role": "user", "content": user_msg}], response_format={"type": "json_object"})
        lesson_payload = json.loads(response.choices[0].message.content or "{}")
    except Exception as e:
        raise HTTPException(status_code=502, detail=f"Erreur de g√©n√©ration OpenAI: {e}")

    if "lesson_text" not in lesson_payload:
        raise HTTPException(status_code=500, detail="La r√©ponse d'OpenAI est invalide.")
        
    # Sauvegarde du nouvel Atom et de son vecteur
    new_atom = atom_model.Atom(
        title="Le√ßon", order=1, content_type=atom_model.AtomContentType.LESSON,
        content=lesson_payload, molecule_id=molecule.id
    )
    db.add(new_atom)
    
    # Cr√©ation du vecteur associ√©
    lesson_text = lesson_payload["lesson_text"]
    new_vector = VectorStore(
        chunk_text=lesson_text, embedding=get_embedding(lesson_text),
        domain=capsule.domain, area=capsule.area, skill=granule.title
    )
    db.add(new_vector)

    db.commit()
    logger.info(f"Mol√©cule '{molecule.title}' et son contenu sauvegard√©s.")
    
    return {"status": "created", "lesson": lesson_payload}


@router.get(
    "/{capsule_id}/granule/{granule_order}/molecule/{molecule_order}",
    # response_model=List[capsule_schema.AtomRead], # Adaptez le sch√©ma de r√©ponse
    summary="R√©cup√©rer ou g√©n√©rer le contenu d'une le√ßon (Mol√©cule)"
)
def get_or_create_molecule_content(
    capsule_id: int,
    granule_order: int,
    molecule_order: int,
    db: Session = Depends(get_db),
    current_user: user_model.User = Depends(get_current_user)
):
    """
    Point d'entr√©e principal pour l'apprentissage.
    R√©cup√®re le contenu d'une le√ßon. S'il n'a jamais √©t√© g√©n√©r√©,
    le service le cr√©e √† la vol√©e (Just-In-Time).
    """
    capsule = db.query(capsule_model.Capsule).get(capsule_id)
    if not capsule:
        raise HTTPException(status_code=404, detail="Capsule non trouv√©e.")

    # On d√©l√®gue toute la logique complexe au service
    service = CapsuleService(db, current_user)
    try:
        # Note: j'ai simplifi√© le nom de la m√©thode dans le service
        atoms = service.prepare_session_for_level(capsule, granule_order, molecule_order)
        return atoms # Retourne la liste des objets Atom
    except Exception as e:
        logger.error(f"Erreur lors de la pr√©paration de la session : {e}", exc_info=True)
        raise HTTPException(status_code=500, detail=str(e))


# NOUVELLE ROUTE : Pour marquer un atome comme termin√©
@router.post(
    "/atom/{atom_id}/complete",
    summary="Marquer un atome comme termin√© par l'utilisateur"
)
def complete_atom(
    atom_id: int,
    # On pourrait recevoir un body avec le score, etc.
    # class AtomCompletionRequest(BaseModel):
    #     score: float
    # request: AtomCompletionRequest,
    db: Session = Depends(get_db),
    current_user: user_model.User = Depends(get_current_user)
):
    """
    Met √† jour la progression de l'utilisateur pour un atome sp√©cifique.
    """
    atom = db.query(atom_model.Atom).get(atom_id)
    if not atom:
        raise HTTPException(status_code=404, detail="Atome non trouv√©.")

    progress = db.query(UserAtomProgress).filter_by(user_id=current_user.id, atom_id=atom_id).first()
    
    if not progress:
        progress = UserAtomProgress(user_id=current_user.id, atom_id=atom_id)
        db.add(progress)

    # Logique simple : on le marque comme compl√©t√© avec 100%
    progress.status = 'completed'
    progress.strength = 1.0 
    
    db.commit()
    db.refresh(progress)
    
    return {"status": "success", "progress": progress}
